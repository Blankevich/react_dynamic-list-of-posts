{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","postId","setPost","className","map","post","id","title","type","classNames","onClick","handleSetPost","Loader","NewCommentForm","addComment","useState","name","setName","email","setEmail","body","setBody","error","setError","isLoadong","setIsLoading","handleInput","value","names","changeForm","event","a","preventDefault","onSubmit","htmlFor","placeholder","onChange","target","required","pattern","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","PostDetails","postComments","setPostComments","isLoading","newComment","setNewComment","loadComment","getComments","useEffect","deleteComment","findComments","find","comment","state","filter","addCommentToPost","length","href","UserSelector","users","showPosts","isUser","setIsUser","showUser","setShowUser","menuRef","useRef","ref","role","user","handleChooseUser","App","setUsers","userPosts","setUserPosts","selectedUser","setSelectedUser","showPost","getPost","ReactDOM","render","document","getElementById"],"mappings":"uSAWaA,EAA6B,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAS1D,OACE,sBAAK,UAAQ,YAAb,UACE,mBAAGC,UAAU,QAAb,oBAEA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACGH,EAAMI,KAAI,SAAAC,GAAI,OACb,qBACE,UAAQ,OADV,UAIE,oBAAI,UAAQ,SAAZ,SAAsBA,EAAKC,KAE3B,oBAAI,UAAQ,YAAZ,SACGD,EAAKE,QAGR,oBAAIJ,UAAU,8BAAd,SACE,wBACEK,KAAK,SACL,UAAQ,aACRL,UAAWM,IACT,SAAU,iBACV,CAAE,YAAkB,OAANR,QAAM,IAANA,OAAA,EAAAA,EAAQK,MAAOD,EAAKC,KAEpCI,QAAS,kBAzCH,SAACL,IACX,OAANJ,QAAM,IAANA,OAAA,EAAAA,EAAQK,MAAOD,EAAKC,GACtBJ,EAAQG,GAERH,EAAQ,MAqCmBS,CAAcN,IAP/B,UASS,OAANJ,QAAM,IAANA,OAAA,EAAAA,EAAQK,MAAOD,EAAKC,GAAK,QAAU,aAlBnCD,EAAKC,gB,OCnCXM,G,MAAS,kBACpB,qBAAKT,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCINU,EAAkC,SAAC,GAA4B,IAA1BZ,EAAyB,EAAzBA,OAAQa,EAAiB,EAAjBA,WACxD,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAA0BN,mBAAS,CACjCC,MAAM,EACNE,OAAO,EACPE,MAAM,IAHR,mBAAOE,EAAP,KAAcC,EAAd,KAKA,EAAkCR,oBAAS,GAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KAEMC,EAAc,SAACC,EAAeC,GAClC,OAAQA,GACN,IAAK,OACHL,EAASD,GACTL,EAAQU,GACR,MACF,IAAK,QACHJ,EAASD,GACTH,EAASQ,GACT,MACF,IAAK,OACHJ,EAASD,GACTD,EAAQM,KAORE,EAAU,uCAAG,WAAOC,GAAP,SAAAC,EAAA,yDACjBD,EAAME,iBACDhB,GAASE,GAAUE,EAFP,uBAGfG,EAAS,CACPP,MAAOA,EACPE,OAAQA,EACRE,MAAOA,IANM,6BAYZnB,EAZY,iDAgBjBwB,GAAa,GAUbX,EARa,CACXb,SACAe,OACAE,QACAE,SAMFC,EAAQ,IACRJ,EAAQ,IACRE,EAAS,IACTM,GAAa,GA/BI,4CAAH,sDA6ChB,OACE,uBACE,UAAQ,iBACRQ,SAAUJ,EAFZ,UAIE,sBAAK1B,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQ+B,QAAQ,sBAAjC,yBAIA,sBAAK/B,UAAU,yCAAf,UACE,uBACEK,KAAK,OACLQ,KAAK,OACLV,GAAG,sBACH6B,YAAY,eACZhC,UAAWM,IAAW,QAAS,CAAE,YAAaa,EAAMN,OACpDW,MAAOX,EACPoB,SAAU,SAACN,GACTJ,EAAYI,EAAMO,OAAOV,MAAOG,EAAMO,OAAOrB,SAIjD,sBAAMb,UAAU,wBAAhB,SACE,mBAAGA,UAAU,kBAEdmB,EAAMN,MACL,sBACEb,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBmB,EAAMN,MACL,mBAAGb,UAAU,iBAAiB,UAAQ,eAAtC,iCAOJ,sBAAKA,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQ+B,QAAQ,uBAAjC,0BAIA,sBAAK/B,UAAU,yCAAf,UACE,uBACEK,KAAK,QACLQ,KAAK,QACLsB,UAAQ,EACRC,QAAQ,0CACRjC,GAAG,uBACH6B,YAAY,iBACZhC,UAAWM,IAAW,QAAS,CAAE,YAAaa,EAAMJ,QACpDS,MAAOT,EACPkB,SAAU,SAACN,GACTJ,EAAYI,EAAMO,OAAOV,MAAOG,EAAMO,OAAOrB,SAIjD,sBAAMb,UAAU,wBAAhB,SACE,mBAAGA,UAAU,sBAEdmB,EAAMJ,OACL,sBACEf,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBmB,EAAMJ,OACL,mBAAGf,UAAU,iBAAiB,UAAQ,eAAtC,kCAOJ,sBAAKA,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQ+B,QAAQ,eAAjC,0BAIA,qBAAK/B,UAAU,UAAf,SACE,0BACEG,GAAG,eACHU,KAAK,OACLmB,YAAY,oBACZhC,UAAWM,IAAW,QAAS,CAAE,YAAaa,EAAMF,OACpDO,MAAOP,EACPgB,SAAU,SAACN,GACTJ,EAAYI,EAAMO,OAAOV,MAAOG,EAAMO,OAAOrB,WAKlDM,EAAMF,MACL,mBAAGjB,UAAU,iBAAiB,UAAQ,eAAtC,gCAOJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEK,KAAK,SACLL,UAAWM,IACT,SAAU,UACV,CAAE,aAAce,IAJpB,mBAYF,qBAAKrB,UAAU,UAAf,SAEE,wBACEK,KAAK,QACLL,UAAU,0BACVO,QA7IQ,WAChBO,EAAQ,IACRE,EAAS,IACTE,EAAQ,IACRE,EAAS,CACPP,MAAM,EACNE,OAAO,EACPE,MAAM,KAmIF,4BClNJoB,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAOxB,SAASI,EACPC,GAGa,IAFbC,EAEY,uDAFY,MACxBC,EACY,uDADI,KAEVC,EAAuB,CAAEF,UAW/B,OATIC,IAEFC,EAAQ9B,KAAO+B,KAAKC,UAAUH,GAC9BC,EAAQG,QAAU,CAChB,eAAgB,oCAKbZ,EAAK,KACTa,MAAK,kBAAMC,MAAMf,EAAWO,EAAKG,MACjCI,MAAK,SAAAE,GAAQ,OAAIA,EAASC,UAGxB,IAAMC,EACN,SAAIX,GAAJ,OAAoBD,EAAWC,IADzBW,EAEL,SAAIX,EAAaE,GAAjB,OAAmCH,EAAWC,EAAK,OAAQE,IAFtDS,EAIH,SAACX,GAAD,OAAiBD,EAAQC,EAAK,WC1B3BY,EAA+B,SAAC,GAAc,IAAZtD,EAAW,EAAXA,KAC7C,EAAwCU,mBAAoB,IAA5D,mBAAO6C,EAAP,KAAqBC,EAArB,KACA,EAA0B9C,mBAAS,SAAnC,mBAAOO,EAAP,KAAcC,EAAd,KACA,EAAkCR,oBAAS,GAA3C,mBAAO+C,EAAP,KAAkBrC,EAAlB,KACA,EAAoCV,oBAAS,GAA7C,mBAAOgD,EAAP,KAAmBC,EAAnB,KAEMC,EAAW,uCAAG,WAAOhE,GAAP,eAAA8B,EAAA,sEAEhBN,GAAa,GAFG,SAGUiC,EAAA,2BAA0CzD,IAHpD,OAGViE,EAHU,OAKhBL,EAAgBK,GALA,gDAOhB3C,EAASD,GAPO,yBAShBG,GAAa,GATG,4EAAH,sDAajB0C,qBAAU,WACR,OAAI9D,QAAJ,IAAIA,KAAMC,KACR0D,GAAc,GACdH,EAAgB,IAChBI,EAAY5D,EAAKC,OAElB,CAACD,IAEJ,IAAM+D,EAAa,uCAAG,WAAO9D,GAAP,eAAAyB,EAAA,yDACdsC,EAAeT,EAAaU,MAAK,SAAAC,GAAO,OAAIA,EAAQjE,KAAOA,KAD7C,iEAQlBuD,GAAgB,SAAAW,GAAK,OACnBA,EAAMC,QAAO,SAAAF,GAAO,OAAIA,EAAQjE,KAAOA,QATvB,SAWZoD,EAAA,oBAA2BpD,IAXf,uDAalBuD,GAAgB,SAAAW,GAAK,4BAEdA,GAFc,CAGjBH,OAhBc,yDAAH,sDAsBbvD,EAAU,uCAAG,WAAOyD,GAAP,eAAAxC,EAAA,+EAEgB2B,EAAqB,YAAaa,GAFlD,OAETG,EAFS,OAIfb,GAAgB,SAAAW,GAAK,4BAEdA,GAFc,CAGjBE,OAPW,gDAWfnD,EAASD,GAXM,yDAAH,sDAehB,OACE,qBAAKnB,UAAU,UAAU,UAAQ,cAAjC,SACE,sBAAKA,UAAU,UAAU,UAAQ,cAAjC,UACE,sBAAKA,UAAU,QAAf,UACE,oBAAI,UAAQ,YAAZ,2BACOE,QADP,IACOA,OADP,EACOA,EAAMC,GADb,oBACoBD,QADpB,IACoBA,OADpB,EACoBA,EAAME,SAG1B,mBAAG,UAAQ,WAAX,gBACGF,QADH,IACGA,OADH,EACGA,EAAMe,UAGX,sBAAKjB,UAAU,QAAf,UACG2D,GACC,cAAC,EAAD,KAUAF,EAAae,QACb,qCACE,mBAAGxE,UAAU,aAAb,uBAECyD,EAAaxD,KAAI,SAAAmE,GAAO,OACvB,0BACEpE,UAAU,mBACV,UAAQ,UAFV,UAKE,sBAAKA,UAAU,iBAAf,UACE,mBAAGyE,KAAI,iBAAYL,EAAQrD,OAAS,UAAQ,gBAA5C,SACGqD,EAAQvD,OAEX,wBACE,UAAQ,gBACRR,KAAK,SACLL,UAAU,kBACV,aAAW,SACXO,QAAS,kBAAM0D,EAAcG,EAAQjE,KALvC,8BAWF,qBAAKH,UAAU,eAAe,UAAQ,cAAtC,SACGoE,EAAQnD,SAlBNmD,EAAQjE,UAwBrB,mBAAGH,UAAU,aAAb,wBACG4D,IAAeD,GAChB,wBACE,UAAQ,qBACRtD,KAAK,SACLL,UAAU,iBACVO,QAAS,kBAAMsD,GAAc,IAJ/B,gCAWHD,IAAeD,GACd,cAAC,EAAD,CACE7D,OAAM,OAAEI,QAAF,IAAEA,OAAF,EAAEA,EAAMC,GACdQ,WAAYA,UC1IX+D,EAAgC,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UACrD,EAA4BhE,qBAA5B,mBAAOiE,EAAP,KAAeC,EAAf,KACA,EAAgClE,oBAAS,GAAzC,mBAAOmE,EAAP,KAAiBC,EAAjB,KACMC,EAAUC,iBAAO,MAQvB,OACE,sBACE,UAAQ,eACRlF,UAAWM,IACT,WACA,CAAE,YAAayE,IAEjBI,IAAKF,EANP,UAQE,qBAAKjF,UAAU,mBAAf,SACE,yBACEK,KAAK,SACLL,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdO,QAAS,kBAAMyE,GAAaD,IAL9B,UAOE,+BAAQF,EAA2BA,EAAOhE,KAAzB,kBAEjB,sBAAMb,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKnD,qBAAKA,UAAU,gBAAgBG,GAAG,gBAAgBiF,KAAK,OAAvD,SACE,qBAAKpF,UAAU,mBAAf,SAEI2E,EAAM1E,KAAI,SAAAoF,GAAI,OACZ,mBACEZ,KAAI,gBAAWY,EAAKlF,IAEpBH,UAAWM,IACT,gBAAiB,CAAE,YAAa+E,EAAKlF,MAAL,OAAY0E,QAAZ,IAAYA,OAAZ,EAAYA,EAAQ1E,MAEtDI,QAAS,kBAzCE,SAAC8E,GACxBP,EAAUO,GACVT,EAAUS,GACVL,GAAY,GAsCeM,CAAiBD,IANlC,SAQGA,EAAKxE,MANDwE,EAAKlF,eCrCboF,EAAgB,WAC3B,MAA0B3E,mBAAiB,IAA3C,mBAAO+D,EAAP,KAAca,EAAd,KACA,EAAkC5E,mBAAiB,IAAnD,mBAAO6E,EAAP,KAAkBC,EAAlB,KACA,EAA0B9E,mBAAS,SAAnC,mBAAOO,EAAP,KAAcC,EAAd,KACA,EAAwBR,mBAAsB,MAA9C,mBAAOV,EAAP,KAAaH,EAAb,KACA,EAAkCa,oBAAS,GAA3C,mBAAO+C,EAAP,KAAkBrC,EAAlB,KACA,EAAwCV,qBAAxC,mBAAO+E,EAAP,KAAqBC,EAArB,KAEA5B,qBAAU,WACRT,EAAmB,UAAUJ,MAAK,SAAAE,GAChCmC,EAASnC,QAEV,IAEH,IAAMwC,EAAQ,uCAAG,WAAOR,GAAP,eAAAzD,EAAA,sEAEbN,GAAa,GACbsE,EAAgBP,GAHH,SAIS9B,EAAA,wBAAoC8B,EAAKlF,KAJlD,OAIP2F,EAJO,OAMbJ,EAAaI,GANA,gDAQb1E,EAASD,GARI,yBAUbG,GAAa,GAVA,4EAAH,sDAcd,OACE,sBAAMtB,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACE2E,MAAOA,EACPC,UAAWiB,MAIf,sBAAK7F,UAAU,QAAQ,UAAQ,cAA/B,WACI2F,GACA,mBAAG,UAAQ,iBAAX,8BAKDhC,GACC,cAAC,EAAD,IASDgC,IAAiBF,EAAUjB,QAC1B,qBAAKxE,UAAU,0BAA0B,UAAQ,aAAjD,0BAID2F,GAAqC,IAArBF,EAAUjB,SAAiBb,GAC1C,cAAC,EAAD,CACE9D,MAAO4F,EACP3F,OAAQI,EACRH,QAASA,YAQnB,qBACE,UAAQ,UACRC,UAAWM,IACT,OACA,YACA,eACA,UACA,CAAE,gBAAiBJ,IAPvB,SAUE,qBAAKF,UAAU,gCAAf,SACGE,GACC,cAAC,EAAD,CACEA,KAAMA,gBClGxB6F,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1d844e51.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  postId: Post | null,\n  setPost: (post: Post | null) => void,\n\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, postId, setPost }) => {\n  const handleSetPost = (post: Post) => {\n    if (postId?.id !== post.id) {\n      setPost(post);\n    } else {\n      setPost(null);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr\n              data-cy=\"Post\"\n              key={post.id}\n            >\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button', 'button is-link',\n                    { 'is-light': postId?.id !== post.id },\n                  )}\n                  onClick={() => handleSetPost(post)}\n                >\n                  {postId?.id === post.id ? 'Close' : 'Open' }\n\n                </button>\n              </td>\n            </tr>\n          ))}\n\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { FormEvent, useState } from 'react';\n\ntype Props = {\n  postId: number | undefined,\n  addComment: (comment: {}) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, addComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [error, setError] = useState({\n    name: false,\n    email: false,\n    body: false,\n  });\n  const [isLoadong, setIsLoading] = useState(false);\n\n  const handleInput = (value: string, names: string) => {\n    switch (names) {\n      case 'name':\n        setError(error);\n        setName(value);\n        break;\n      case 'email':\n        setError(error);\n        setEmail(value);\n        break;\n      case 'body':\n        setError(error);\n        setBody(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const changeForm = async (event: FormEvent) => {\n    event.preventDefault();\n    if (!name || !email || !body) {\n      setError({\n        name: !name,\n        email: !email,\n        body: !body,\n      });\n\n      return;\n    }\n\n    if (!postId) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    const data = {\n      postId,\n      name,\n      email,\n      body,\n\n    };\n\n    addComment(data);\n\n    setBody('');\n    setName('');\n    setEmail('');\n    setIsLoading(false);\n  };\n\n  const clearForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n    setError({\n      name: false,\n      email: false,\n      body: false,\n    });\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={changeForm}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': error.name })}\n            value={name}\n            onChange={(event) => {\n              handleInput(event.target.value, event.target.name);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n          {error.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n        {error.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            required\n            pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': error.email })}\n            value={email}\n            onChange={(event) => {\n              handleInput(event.target.value, event.target.name);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n          {error.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n        {error.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('input', { 'is-danger': error.body })}\n            value={body}\n            onChange={(event) => {\n              handleInput(event.target.value, event.target.name);\n            }}\n          />\n        </div>\n\n        {error.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button', 'is-link',\n              { 'is-loading': isLoadong },\n            )}\n\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: unknown) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: unknown) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  post: Post | null;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [error, setError] = useState('error');\n  const [isLoading, setIsLoading] = useState(false);\n  const [newComment, setNewComment] = useState(false);\n\n  const loadComment = async (postId: number) => {\n    try {\n      setIsLoading(true);\n      const getComments = await client.get<Comment[]>(`/comments?postId=${postId}`);\n\n      setPostComments(getComments);\n    } catch {\n      setError(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (post?.id) {\n      setNewComment(false);\n      setPostComments([]);\n      loadComment(post.id);\n    }\n  }, [post]);\n\n  const deleteComment = async (id: number) => {\n    const findComments = postComments.find(comment => comment.id === id);\n\n    if (!findComments) {\n      return;\n    }\n\n    try {\n      setPostComments(state => (\n        state.filter(comment => comment.id !== id)\n      ));\n      await client.delete(`/comments/${id}`);\n    } catch {\n      setPostComments(state => (\n        [\n          ...state,\n          findComments,\n        ]\n      ));\n    }\n  };\n\n  const addComment = async (comment: {}) => {\n    try {\n      const addCommentToPost = await client.post<Comment>('/comments', comment);\n\n      setPostComments(state => (\n        [\n          ...state,\n          addCommentToPost,\n        ]\n      ));\n    } catch {\n      setError(error);\n    }\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n        <div className=\"block\">\n          {isLoading && (\n            <Loader />\n          )}\n\n          {/* <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n            Something went wrong\n          </div>\n\n          <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n            No comments yet\n          </p> */}\n          {!postComments.length || (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {postComments.map(comment => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => deleteComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n          <p className=\"title is-4\">Comments:</p>\n          {(!newComment && !isLoading) && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setNewComment(true)}\n            >\n              Write a comment\n            </button>\n          )}\n\n        </div>\n        {newComment && !isLoading && (\n          <NewCommentForm\n            postId={post?.id}\n            addComment={addComment}\n          />\n        )}\n\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useRef, useState } from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[]\n  showPosts: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({ users, showPosts }) => {\n  const [isUser, setIsUser] = useState<User>();\n  const [showUser, setShowUser] = useState(false);\n  const menuRef = useRef(null);\n\n  const handleChooseUser = (user: User) => {\n    setIsUser(user);\n    showPosts(user);\n    setShowUser(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': showUser },\n      )}\n      ref={menuRef}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setShowUser(!showUser)}\n        >\n          <span>{!isUser ? 'Choose a user' : isUser.name}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {\n            users.map(user => (\n              <a\n                href={`#user-${user.id}`}\n                key={user.id}\n                className={classNames(\n                  'dropdown-item', { 'is-active': user.id === isUser?.id },\n                )}\n                onClick={() => handleChooseUser(user)}\n              >\n                {user.name}\n              </a>\n            ))\n          }\n\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { client } from './utils/fetchClient';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [error, setError] = useState('error');\n  const [post, setPost] = useState<Post | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User>();\n\n  useEffect(() => {\n    client.get<User[]>('/users').then(response => {\n      setUsers(response);\n    });\n  }, []);\n\n  const showPost = async (user: User) => {\n    try {\n      setIsLoading(true);\n      setSelectedUser(user);\n      const getPost = await client.get<Post[]>(`/posts?userId=${user.id}`);\n\n      setUserPosts(getPost);\n    } catch {\n      setError(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  showPosts={showPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n\n                )}\n                {isLoading && (\n                  <Loader />\n                )}\n\n                {/* <div\n                  className=\"notification is-danger\"\n                  data-cy=\"PostsLoadingError\"\n                >\n                  Something went wrong!\n                </div> */}\n                {selectedUser && !userPosts.length && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n                {selectedUser && userPosts.length !== 0 && !isLoading && (\n                  <PostsList\n                    posts={userPosts}\n                    postId={post}\n                    setPost={setPost}\n                  />\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': post },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {post && (\n                <PostDetails\n                  post={post}\n                />\n              )}\n\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}